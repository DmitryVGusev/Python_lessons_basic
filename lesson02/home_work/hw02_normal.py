# Задача-1:
# Дан список, заполненный произвольными целыми числами, получите новый список,
# элементами которого будут квадратные корни элементов исходного списка,
# но только если результаты извлечения корня не имеют десятичной части и
# если такой корень вообще можно извлечь
# Пример: Дано: [2, -5, 8, 9, -25, 25, 4]   Результат: [3, 5, 2]

# Для работы с квадратными корнями подключаем функцию "sqrt" из библиотеки "math"
from math import sqrt

# Исходный список
some_list = [2, -5, 8, 9, -25, 25, 4]

# Инициализируем новый список, куда будем складывать результаты
result_list = []

# Пробегаемся по элементам списка
for num in some_list:

    # Если элемент списка отрицательный - переходим к следующему
    if num < 1:
        continue

    # Вычисляем квадратный корень и берем от него целую часть
    num_sqroot = int(sqrt(num))

    # Если целая часть корня элемента равна квадратному корню элемента, то добавляем этот корень в список с результатами
    if num_sqroot == sqrt(num):
        result_list.append(num_sqroot)


# Задача-2: Дана дата в формате dd.mm.yyyy, например: 02.11.2013.
# Ваша задача вывести дату в текстовом виде, например: второе ноября 2013 года.
# Склонением пренебречь (2000 года, 2010 года)

# Для разнообразия, не будем полностью заполнять все 31 ключ в словаре,
#  а будем генерировать двадцатые
days = {
    1: 'первое', 2: "второе", 3: "третье",
    4: "четвертое", 5: "пятое", 6: "шестое",
    7: "седьмое", 8: "восьмое", 9: "девятое",
    10: "десятое", 11: "одиннадцатое", 12: "двенадцатое",
    13: "тринадцатое", 14: "четырнадцатое", 15: "пятнадцатое",
    16: "шестнадцатое", 17: "семнадцатое", 18: "восемнадцатое",
    19: "девятнадцатое", 20: "двадцатое",
    30: "тридцатое", 31: "тридцать первое"
}

# Создадим словарь месяцев
months = {
    1: "января", 2: "февраля", 3: "марта",
    4: "апреля", 5: "мая", 6: "июня",
    7: "июля", 8: "августа", 9: "сентября",
    10: "октября", 11: "ноября", 12: "декабря",
}

# Заводим переменную с датой
data = '22.02.2019'

# Полагая, что дата в значении всегда корректная, с помощью срезов строки вычисляем день, месяц и год
int_days = int(data[:2])
int_months = int(data[3:5])
string_years = data[-4:]  # Переводить года в число нет смылса

"""
Логика перевода дней из числа в строку:
Если числа нет среди ключей словаря - до это двадцатые числа
 а значит можно представить как "двадцать " и однозначное число из словаря
"""
if int_days in days:
    string_days = days[int_days]
else:
    string_days = "двадцать " + days[int_days - 20]

# Перевод месяца из числа в строку по ключю в словаре месяцев
string_months = months[int_months]

# Выводим дату
print("{} {} {} года".format(string_days, string_months, string_years))


# Задача-3: Напишите алгоритм, заполняющий список произвольными целыми числами
# в диапазоне от -100 до 100. В списке должно быть n - элементов.
# Подсказка:
# для получения случайного числа используйте функцию randint() модуля random

# Подключаем функцию randint из модуля random
from random import randint

# Полагаем что n дается всегда целочисленным и положительным
n = 40

# Инициализируем список который будем заполнять произвольными целыми числами
random_list = []

# Добавляем в список случайное целое число с заданным интервалом n раз
while n != 0:
    random_list.append(randint(-100, 100))
    n -= 1


# Задача-4: Дан список, заполненный произвольными целыми числами.
# Получите новый список, элементами которого будут: 
# а) неповторяющиеся элементы исходного списка:
# например, lst = [1, 2, 4, 5, 6, 2, 5, 2], нужно получить lst2 = [1, 2, 4, 5, 6]
# б) элементы исходного списка, которые не имеют повторений:
# например, lst = [1 , 2, 4, 5, 6, 2, 5, 2], нужно получить lst2 = [1, 4, 6]


# # а) неповторяющиеся элементы исходного списка:
lst = [1, 2, 4, 5, 6, 2, 5, 2]

# Передадим список в множество и переведем обратно в список
lst2 = list(set(lst))


# # б) элементы исходного списка, которые не имеют повторений:
lst = [1, 2, 4, 5, 6, 2, 5, 2]

# Создадим множество из списка
lst_set = set(lst)

# Проинициализируем итоговый список
lst2 = []

"""
Проитерируемся по элементам множества
Будем вытаскивать из множества число и проверять количество совпадений в списке
Если количество совпадений == 1, то добавим число в итоговый список lst2
"""
i = len(lst_set)
while len(lst_set) > 0:
    num = lst_set.pop()
    if lst.count(num) == 1:
        lst2.append(num)

