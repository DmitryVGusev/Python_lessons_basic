# Все задачи текущего блока решите с помощью генераторов списков!

"""
Не уверен, что корректно lambda-функцию заводить в переменную.
По крайней мере, PEP8 просит так не делать.
Но хотелось показать лаконичность решения.
"""

# Задание-1:
# Дан список, заполненный произвольными целыми числами. 
# Получить новый список, элементы которого будут
# квадратами элементов исходного списка
# [1, 2, 4, 0] --> [1, 4, 16, 0]

# Реализуем в виде lambda-функции
squared = lambda lst: [x ** 2 for x in lst]

# Проверка
print("Проверка первой задачи")
print(squared([1, 2, 3, 4]))  # [1, 4, 9, 16]
print(squared([_ for _ in range(-5, 5)]))  # [25, 16, 9, 4, 1, 0, 1, 4, 9, 16]


# Задание-2:
# Даны два списка фруктов.
# Получить список фруктов, присутствующих в обоих исходных списках.

# Реализуем в виде lambda-функции
conjunction = lambda lst1, lst2: [x for x in lst1 if x in lst2]

# Проверка
print("Проверка второй задачи")
print(conjunction([1, 2, 3], [3, 4, 1]))  # [1, 3]


# Задание-3:
# Дан список, заполненный произвольными числами.
# Получить список из элементов исходного, удовлетворяющих следующим условиям:
# + Элемент кратен 3
# + Элемент положительный
# + Элемент не кратен 4

# Реализуем в виде lambda-функции. Совместим усливия проверки с помощью логического И
multy_filter = lambda lst: [x for x in lst if x % 3 == 0 and x >= 0 and x % 4 != 0]

# Проверка
from random import randint

print("Проверка третьей задачи")
known_list = [1, 2, 3, 4, 5, 12, -9]
print(multy_filter(known_list))  # [3]
print(multy_filter([randint(-5, 20) for _ in range(10)]))  # Ну тут уж как повезёт =)
